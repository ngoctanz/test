export const TOKEN_KEYS = {
  ACCESS: "accessToken",
  REFRESH: "refreshToken",
};

/**
 * Ki·ªÉm tra xem tr√¨nh duy·ªát c√≥ h·ªó tr·ª£ cookie cross-site kh√¥ng
 * => Safari iOS th∆∞·ªùng fail ·ªü ƒë√¢y
 */
export function canUseCookies(): boolean {
  try {
    document.cookie = "cookie_test=1; SameSite=None; Secure";
    const supported = document.cookie.includes("cookie_test=");
    // X√≥a test cookie
    document.cookie =
      "cookie_test=1; Max-Age=0; path=/; SameSite=None; Secure;";
    return supported;
  } catch {
    return false;
  }
}

/**
 * L∆∞u token fallback v√†o localStorage
 */
export function saveTokensToLocal(tokens: {
  accessToken: string;
  refreshToken?: string;
}) {
  if (tokens.accessToken)
    localStorage.setItem(TOKEN_KEYS.ACCESS, tokens.accessToken);
  if (tokens.refreshToken)
    localStorage.setItem(TOKEN_KEYS.REFRESH, tokens.refreshToken);
}

/**
 * L·∫•y access token fallback (n·∫øu c√≥)
 */
export function getLocalAccessToken(): string | null {
  return localStorage.getItem(TOKEN_KEYS.ACCESS);
}

/**
 * üîπ L·∫•y refresh token fallback (n·∫øu c√≥)
 */
export function getLocalRefreshToken(): string | null {
  return localStorage.getItem(TOKEN_KEYS.REFRESH);
}

/**
 * X√≥a to√†n b·ªô token fallback
 */
export function clearLocalTokens() {
  localStorage.removeItem(TOKEN_KEYS.ACCESS);
  localStorage.removeItem(TOKEN_KEYS.REFRESH);
}
